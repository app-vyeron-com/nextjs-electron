{"version":3,"sources":["../src/index.ts","../src/config.ts","../src/app-lifecycle.ts","../src/ipc.ts","../src/updater.ts","../src/utils/logger.ts","../src/webgpu.ts"],"sourcesContent":["/**\n * @fileOverview Main entry point for the nextjs-electron library.\n * This file exports the primary functions and types for users of the library.\n *\n * - launchApp: Function to initialize and launch the Electron application.\n * - ElectronConfig: Type definition for the configuration object.\n */\n\nimport { app, BrowserWindow } from 'electron';\nimport path from 'path';\nimport { configureApp, type ElectronConfig, type MergedElectronConfig, getDefaultConfig } from './config';\nimport { setupAppLifecycle } from './app-lifecycle'; // Corrected import path\nimport { enableWebGPU } from './webgpu';\nimport { initializeLogger } from './utils/logger';\n\nexport type { ElectronConfig, WindowOptions, SecurityConfig, WebGPUConfig } from './config';\n\nlet mainWindow: BrowserWindow | null = null;\n\n/**\n * Launches the Electron application with the given user configuration.\n * Merges user config with defaults and starts the Electron app lifecycle.\n *\n * @param userConfig - Optional configuration object for the Electron application.\n */\nexport async function launchApp(userConfig?: Partial<ElectronConfig>): Promise<void> {\n  const config = configureApp(userConfig);\n  initializeLogger(config.logLevel);\n\n  if (config.enableWebGPU) {\n    enableWebGPU(app, config.webgpu);\n  }\n\n  // Ensure single instance\n  const gotTheLock = app.requestSingleInstanceLock({\n    productName: config.productName,\n  });\n\n  if (!gotTheLock) {\n    app.quit();\n    return;\n  }\n\n  app.on('second-instance', (_event, commandLine, _workingDirectory, additionalData) => {\n    if (mainWindow) {\n      if (mainWindow.isMinimized()) mainWindow.restore();\n      mainWindow.focus();\n    }\n    // You can handle commandLine and additionalData here\n    console.log('Second instance started with:', commandLine, additionalData);\n  });\n  \n  // Set AppUserModelID for Windows\n  if (process.platform === 'win32' && config.appId) {\n      app.setAppUserModelId(config.appId);\n  }\n\n  // Defer app ready handling to setupAppLifecycle\n  // This function should only be called once.\n  if (app.isReady()) {\n    console.warn(\"launchApp called after app.isReady(). This might lead to unexpected behavior if Electron's main entry point is not this library's main.js.\");\n    // If app is already ready, directly proceed. This path is less common for library usage.\n    mainWindow = await setupAppLifecycle(config);\n  } else {\n    app.on('ready', async () => {\n      mainWindow = await setupAppLifecycle(config);\n    });\n  }\n\n  app.on('window-all-closed', () => {\n    if (process.platform !== 'darwin') {\n      app.quit();\n    }\n  });\n\n  app.on('activate', async () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      if (app.isReady()) { // Ensure app is ready before creating a window on activate\n        mainWindow = await setupAppLifecycle(config); // Re-setup or create new window\n      }\n    } else if (mainWindow) {\n        mainWindow.show();\n    }\n  });\n\n  // Graceful shutdown\n  process.on('SIGINT', () => app.quit());\n  process.on('SIGTERM', () => app.quit());\n\n  // Uncaught exception handling\n  process.on('uncaughtException', (error) => {\n    console.error('Uncaught Exception:', error);\n    // Optionally: log to file, report to service, then exit\n    app.quit();\n  });\n}\n\n// Re-export config related items if needed by consumers for type safety or extension\nexport { getDefaultConfig, configureApp };\nexport function getMainWindow(): BrowserWindow | null {\n  return mainWindow;\n}\n","\n/**\n * @fileOverview Configuration management for the Electron application.\n * Defines the configuration schema, default values, and merging logic.\n */\n\nimport { app } from 'electron';\nimport path from 'path';\nimport { z } from 'zod';\nimport fs from 'fs-extra';\nimport merge from 'lodash.merge'; // Using lodash.merge for deep merging\n\n// Define Zod schemas for different parts of the configuration\n\nconst WindowOptionsSchema = z.object({\n  width: z.number().int().positive().default(1024),\n  height: z.number().int().positive().default(768),\n  minWidth: z.number().int().positive().optional(),\n  minHeight: z.number().int().positive().optional(),\n  maxWidth: z.number().int().positive().optional(),\n  maxHeight: z.number().int().positive().optional(),\n  x: z.number().int().optional(),\n  y: z.number().int().optional(),\n  center: z.boolean().default(true),\n  resizable: z.boolean().default(true),\n  movable: z.boolean().default(true),\n  minimizable: z.boolean().default(true),\n  maximizable: z.boolean().default(true),\n  closable: z.boolean().default(true),\n  focusable: z.boolean().default(true),\n  alwaysOnTop: z.boolean().default(false),\n  fullscreen: z.boolean().default(false),\n  fullscreenable: z.boolean().default(true),\n  skipTaskbar: z.boolean().default(false),\n  kiosk: z.boolean().default(false),\n  title: z.string().default('Electron App'),\n  icon: z.string().optional(), // Path to icon\n  show: z.boolean().default(true),\n  frame: z.boolean().default(true),\n  parent: z.any().optional(), // BrowserWindow\n  modal: z.boolean().default(false),\n  acceptFirstMouse: z.boolean().default(false),\n  disableAutoHideCursor: z.boolean().default(false),\n  autoHideMenuBar: z.boolean().default(false),\n  enableLargerThanScreen: z.boolean().default(false),\n  backgroundColor: z.string().default('#FFF'),\n  hasShadow: z.boolean().default(true),\n  opacity: z.number().min(0).max(1).default(1),\n  darkTheme: z.boolean().default(false),\n  transparent: z.boolean().default(false),\n  type: z.string().optional(),\n  titleBarStyle: z.enum(['default', 'hidden', 'hiddenInset', 'customButtonsOnHover']).default('default'),\n  trafficLightPosition: z.object({ x: z.number(), y: z.number() }).optional(),\n  roundedCorners: z.boolean().default(true),\n  thickFrame: z.boolean().optional(), // Optional, no default by Zod, means it can be undefined\n  vibrancy: z.enum(['appearance-based', 'light', 'dark', 'titlebar', 'selection', 'menu', 'popover', 'sidebar', 'medium-light', 'ultra-dark', 'header', 'sheet', 'window', 'hud', 'fullscreen-ui', 'tooltip', 'content', 'under-window', 'under-page']).optional(),\n  zoomToPageWidth: z.boolean().default(false),\n  tabbingIdentifier: z.string().optional(),\n  webPreferences: z.object({\n    devTools: z.boolean().optional(), // Default determined by isDev\n    nodeIntegration: z.boolean().default(false),\n    nodeIntegrationInWorker: z.boolean().default(false),\n    nodeIntegrationInSubFrames: z.boolean().default(false),\n    preload: z.string().optional(), // Path to preload script, set by the library\n    sandbox: z.boolean().default(true), // Recommended true for security\n    contextIsolation: z.boolean().default(true), // Recommended true for security\n    webSecurity: z.boolean().default(true),\n    allowRunningInsecureContent: z.boolean().default(false),\n    images: z.boolean().default(true),\n    imageAnimationPolicy: z.enum(['animate', 'animateOnce', 'noAnimation']).default('animate'),\n    textAreasAreResizable: z.boolean().default(true),\n    webgl: z.boolean().default(true),\n    plugins: z.boolean().default(false), // Flash and other plugins\n    experimentalFeatures: z.boolean().default(false),\n    scrollBounce: z.boolean().default(false),\n    enableRemoteModule: z.boolean().default(false), // Deprecated and insecure\n    worldSafeExecuteJavaScript: z.boolean().default(true),\n  }).default({}),\n}).default({});\nexport type WindowOptions = z.infer<typeof WindowOptionsSchema>;\n\n\nconst SecurityConfigSchema = z.object({\n  csp: z.string().optional().default(\"default-src 'self' file:; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: file:; connect-src 'self';\"),\n  enableNodeIntegrationInRenderers: z.boolean().default(false), // Overrides webPreferences.nodeIntegration for all windows if true\n  disableContextIsolation: z.boolean().default(false), // Overrides webPreferences.contextIsolation for all windows if true\n  allowedNavigationHosts: z.array(z.string().url()).optional().default([]),\n}).default({});\nexport type SecurityConfig = z.infer<typeof SecurityConfigSchema>;\n\nconst WebGPUConfigSchema = z.object({\n  forceSoftware: z.boolean().default(false),\n  powerPreference: z.enum(['default', 'low-power', 'high-performance']).default('default'),\n}).default({});\nexport type WebGPUConfig = z.infer<typeof WebGPUConfigSchema>;\n\nconst ElectronConfigSchema = z.object({\n  productName: z.string().default(app.getName()),\n  appId: z.string().optional(),\n  appUrl: z.string().optional(),\n  windowOptions: WindowOptionsSchema,\n  security: SecurityConfigSchema,\n  enableWebGPU: z.boolean().default(false),\n  webgpu: WebGPUConfigSchema,\n  singleInstanceLock: z.boolean().default(true),\n  logLevel: z.enum(['error', 'warn', 'info', 'verbose', 'debug', 'silly']).default('info'),\n  openDevTools: z.boolean().optional(),\n  userDataPath: z.string().optional(),\n  updater: z.object({\n    autoDownload: z.boolean().default(true),\n    autoInstallOnAppQuit: z.boolean().default(true),\n    allowDowngrade: z.boolean().default(false),\n  }).optional().default({ autoDownload: true, autoInstallOnAppQuit: true, allowDowngrade: false }),\n}).default({});\n\nexport type ElectronConfig = z.infer<typeof ElectronConfigSchema>;\nexport type MergedElectronConfig = Required<ElectronConfig>;\n\n\nconst isDev = !app.isPackaged;\n\nexport function getDefaultConfig(): ElectronConfig {\n  const defaults: ElectronConfig = {\n    productName: 'ElectronCoreApp',\n    appId: 'com.electroncore.app',\n    appUrl: isDev\n      ? `file://${path.join(app.getAppPath(), '..', 'out', 'index.html')}`\n      : `file://${path.join(process.resourcesPath, 'app.asar', 'out', 'index.html')}`,\n    windowOptions: {\n      width: 1280,\n      height: 720,\n      minWidth: undefined, // Explicitly undefined if no Zod default and optional\n      minHeight: undefined,\n      maxWidth: undefined,\n      maxHeight: undefined,\n      x: undefined,\n      y: undefined,\n      center: true,\n      resizable: true,\n      movable: true,\n      minimizable: true,\n      maximizable: true,\n      closable: true,\n      focusable: true,\n      alwaysOnTop: false,\n      fullscreen: false,\n      fullscreenable: true,\n      skipTaskbar: false,\n      kiosk: false,\n      title: 'My Electron App',\n      icon: undefined,\n      show: true,\n      frame: true,\n      parent: undefined,\n      modal: false,\n      acceptFirstMouse: false,\n      disableAutoHideCursor: false,\n      autoHideMenuBar: false, // Zod default\n      enableLargerThanScreen: false,\n      backgroundColor: '#FFF', // Zod default\n      hasShadow: true,\n      opacity: 1,\n      darkTheme: false,\n      transparent: false,\n      type: undefined,\n      titleBarStyle: 'default',\n      trafficLightPosition: undefined,\n      roundedCorners: true,\n      thickFrame: undefined,\n      vibrancy: undefined,\n      zoomToPageWidth: false,\n      tabbingIdentifier: undefined,\n      webPreferences: {\n        preload: path.join(__dirname, 'preload.js'), // Library controlled\n        devTools: isDev, // Dynamically set\n        nodeIntegration: false,\n        nodeIntegrationInWorker: false,\n        nodeIntegrationInSubFrames: false,\n        sandbox: true,\n        contextIsolation: true,\n        webSecurity: true,\n        allowRunningInsecureContent: false,\n        images: true,\n        imageAnimationPolicy: 'animate',\n        textAreasAreResizable: true,\n        webgl: true,\n        plugins: false,\n        experimentalFeatures: false,\n        scrollBounce: false,\n        enableRemoteModule: false,\n        worldSafeExecuteJavaScript: true,\n      },\n    },\n    security: {\n      csp: \"default-src 'self' file:; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: file:; connect-src 'self';\",\n      enableNodeIntegrationInRenderers: false,\n      disableContextIsolation: false,\n      allowedNavigationHosts: [],\n    },\n    enableWebGPU: false,\n    webgpu: {\n      forceSoftware: false,\n      powerPreference: 'default',\n    },\n    singleInstanceLock: true,\n    logLevel: isDev ? 'debug' : 'info',\n    openDevTools: isDev, // Dynamically set\n    userDataPath: undefined,\n    updater: { // Zod default\n      autoDownload: true,\n      autoInstallOnAppQuit: true,\n      allowDowngrade: false,\n    }\n  };\n  return defaults;\n}\n\nexport function configureApp(userConfig?: Partial<ElectronConfig>): MergedElectronConfig {\n  const defaultConfig = getDefaultConfig();\n  const mergedConfig = merge({}, defaultConfig, userConfig);\n\n  mergedConfig.windowOptions.webPreferences.preload = path.join(__dirname, 'preload.js');\n  mergedConfig.windowOptions.webPreferences.contextIsolation = !mergedConfig.security.disableContextIsolation;\n  mergedConfig.windowOptions.webPreferences.nodeIntegration = mergedConfig.security.enableNodeIntegrationInRenderers;\n  \n  if (userConfig?.windowOptions?.webPreferences?.devTools !== undefined) {\n    mergedConfig.windowOptions.webPreferences.devTools = userConfig.windowOptions.webPreferences.devTools;\n  } else {\n    mergedConfig.windowOptions.webPreferences.devTools = isDev;\n  }\n\n  if (userConfig?.openDevTools !== undefined) {\n    mergedConfig.openDevTools = userConfig.openDevTools;\n  } else {\n    mergedConfig.openDevTools = isDev;\n  }\n\n  try {\n    const parsedConfig = ElectronConfigSchema.parse(mergedConfig);\n    return parsedConfig as MergedElectronConfig;\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      console.error('Configuration validation error:', error.errors);\n      throw new Error('Invalid application configuration.');\n    }\n    throw error;\n  }\n}\n\nexport async function loadConfigFromFile(filePath: string = path.join(app.getAppPath(), '.electronrc.json')): Promise<Partial<ElectronConfig> | null> {\n  try {\n    if (await fs.pathExists(filePath)) {\n      const fileContent = await fs.readFile(filePath, 'utf-8');\n      const configFromFile = JSON.parse(fileContent);\n      return configFromFile as Partial<ElectronConfig>;\n    }\n    return null;\n  } catch (error) {\n    console.warn(`Failed to load or parse config file from ${filePath}:`, error);\n    return null;\n  }\n}\n","/**\n * @fileOverview Manages Electron app lifecycle events and window creation.\n * This was previously part of main.ts or index.ts, refactored for clarity.\n */\nimport { app, BrowserWindow, shell, session, Menu, dialog } from 'electron';\nimport path from 'path';\nimport type { MergedElectronConfig } from './config';\nimport { initializeIPCHandlers } from './ipc';\nimport { initializeUpdater } from './updater';\nimport log from './utils/logger'; // Use the configured logger\n\nlet mainWindowInstance: BrowserWindow | null = null;\n\nfunction createMainWindow(config: MergedElectronConfig): BrowserWindow {\n  const windowOptions = { ...config.windowOptions }; // Copy to avoid mutating original config\n\n  // Ensure webPreferences and preload script path are correctly set\n  windowOptions.webPreferences = {\n    ...windowOptions.webPreferences,\n    preload: path.join(__dirname, 'preload.js'), // Always use the library's preload\n    contextIsolation: !config.security.disableContextIsolation,\n    nodeIntegration: config.security.enableNodeIntegrationInRenderers,\n    sandbox: windowOptions.webPreferences?.sandbox !== undefined ? windowOptions.webPreferences.sandbox : true, // Default to true if not specified by user\n  };\n\n  const win = new BrowserWindow(windowOptions);\n  mainWindowInstance = win;\n\n  // Load the app URL (Next.js export)\n  if (config.appUrl) {\n    win.loadURL(config.appUrl).catch(err => {\n      log.error(`Failed to load URL ${config.appUrl}:`, err);\n      dialog.showErrorBox('Load Error', `Failed to load the application content from ${config.appUrl}. Please check the path and ensure your Next.js app is exported correctly to the 'out' directory.`);\n    });\n  } else {\n    log.error('appUrl is not defined in the configuration. Cannot load application content.');\n    dialog.showErrorBox('Configuration Error', 'Application URL is not configured. Unable to load content.');\n  }\n\n  // Open DevTools if configured\n  if (config.openDevTools ?? (!app.isPackaged)) {\n    win.webContents.openDevTools();\n  }\n\n  // Security: Intercept new window requests\n  win.webContents.setWindowOpenHandler(({ url }) => {\n    // Example: Allow specific URLs or deny all\n    // For instance, only allow http/https links to open in external browser\n    if (url.startsWith('http:') || url.startsWith('https:')) {\n      shell.openExternal(url);\n      return { action: 'deny' };\n    }\n    // Potentially allow specific internal routes if your app uses them for new windows\n    // if (url.startsWith('app://')) { return { action: 'allow' }; }\n    log.warn(`Blocked new window for URL: ${url}`);\n    return { action: 'deny' };\n  });\n\n  // Apply Content Security Policy\n  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {\n    callback({\n      responseHeaders: {\n        ...details.responseHeaders,\n        'Content-Security-Policy': [config.security.csp || \"default-src 'self'\"],\n      },\n    });\n  });\n  \n  win.on('closed', () => {\n    mainWindowInstance = null;\n  });\n\n  return win;\n}\n\nfunction setupMenu(config: MergedElectronConfig) {\n  const template: (Electron.MenuItemConstructorOptions | Electron.MenuItem)[] = [\n    ...(process.platform === 'darwin' ? [{\n      label: config.productName || app.getName(),\n      submenu: [\n        { role: 'about' },\n        { type: 'separator' },\n        { role: 'services' },\n        { type: 'separator' },\n        { role: 'hide' },\n        { role: 'hideOthers' },\n        { role: 'unhide' },\n        { type: 'separator' },\n        { role: 'quit' }\n      ]\n    }] as Electron.MenuItemConstructorOptions[] : []),\n    {\n      label: 'File',\n      submenu: [\n        process.platform === 'darwin' ? { role: 'close' } : { role: 'quit' }\n      ]\n    },\n    {\n      label: 'Edit',\n      submenu: [\n        { role: 'undo' },\n        { role: 'redo' },\n        { type: 'separator' },\n        { role: 'cut' },\n        { role: 'copy' },\n        { role: 'paste' },\n        ...(process.platform === 'darwin' ? [\n          { role: 'pasteAndMatchStyle' },\n          { role: 'delete' },\n          { role: 'selectAll' },\n          { type: 'separator' },\n          {\n            label: 'Speech',\n            submenu: [\n              { role: 'startSpeaking' },\n              { role: 'stopSpeaking' }\n            ]\n          }\n        ] : [\n          { role: 'delete' },\n          { type: 'separator' },\n          { role: 'selectAll' }\n        ]) as Electron.MenuItemConstructorOptions[]\n      ]\n    },\n    {\n      label: 'View',\n      submenu: [\n        { role: 'reload' },\n        { role: 'forceReload' },\n        { role: 'toggleDevTools' },\n        { type: 'separator' },\n        { role: 'resetZoom' },\n        { role: 'zoomIn' },\n        { role: 'zoomOut' },\n        { type: 'separator' },\n        { role: 'togglefullscreen' }\n      ]\n    },\n    {\n      label: 'Window',\n      submenu: [\n        { role: 'minimize' },\n        { role: 'zoom' },\n        ...(process.platform === 'darwin' ? [\n          { type: 'separator' },\n          { role: 'front' },\n          { type: 'separator' },\n          { role: 'window' }\n        ] : [\n          { role: 'close' }\n        ]) as Electron.MenuItemConstructorOptions[]\n      ]\n    },\n    {\n      role: 'help',\n      submenu: [\n        {\n          label: 'Learn More',\n          click: async () => {\n            await shell.openExternal('https://electronjs.org')\n          }\n        }\n      ]\n    }\n  ];\n\n  const menu = Menu.buildFromTemplate(template);\n  Menu.setApplicationMenu(menu);\n}\n\n\n/**\n * Sets up the primary application lifecycle events and creates the main window.\n * This function is typically called when Electron's 'ready' event fires.\n * @param config - The merged and validated application configuration.\n * @returns The main BrowserWindow instance.\n */\nexport async function setupAppLifecycle(config: MergedElectronConfig): Promise<BrowserWindow> {\n  log.info(`Setting up app lifecycle for: ${config.productName}`);\n  log.debug('Using configuration:', config);\n  \n  if (mainWindowInstance && !mainWindowInstance.isDestroyed()) {\n    log.warn('Main window already exists. Focusing existing window.');\n    mainWindowInstance.focus();\n    return mainWindowInstance;\n  }\n\n  // Initialize IPC Handlers\n  initializeIPCHandlers({ config });\n\n  // Create the browser window.\n  const mainWindow = createMainWindow(config);\n  \n  // Setup application menu\n  setupMenu(config);\n\n  // Initialize auto-updater if configured\n  if (config.updater) {\n    initializeUpdater(mainWindow, config.updater, config.logLevel === 'debug');\n  }\n  \n  // Optional: Set user data path if specified\n  if (config.userDataPath) {\n      try {\n          const resolvedPath = path.resolve(config.userDataPath);\n          log.info(`Setting user data path to: ${resolvedPath}`);\n          app.setPath('userData', resolvedPath);\n      } catch (error) {\n          log.error(`Failed to set custom user data path '${config.userDataPath}':`, error);\n      }\n  }\n\n\n  app.on('activate', () => {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) {\n      log.info('App activated with no windows open, creating new main window.');\n      createMainWindow(config);\n    } else if (mainWindowInstance && !mainWindowInstance.isDestroyed()) {\n      log.info('App activated, showing existing main window.');\n      mainWindowInstance.show();\n    }\n  });\n  \n  log.info('App lifecycle setup complete.');\n  return mainWindow;\n}\n\nexport function getMainWindowInstance(): BrowserWindow | null {\n    return mainWindowInstance;\n}\n","/**\n * @fileOverview IPC (Inter-Process Communication) channel definitions and handlers.\n * Centralizes IPC logic for type safety and clarity.\n */\n\nimport { ipcMain, IpcMainEvent, IpcMainInvokeEvent, shell } from 'electron';\nimport type { MergedElectronConfig } from './config'; // For accessing config if needed\n\n// Define IPC channel names as constants for better maintainability and type safety\nexport type IPCChannel =\n  | 'example-request-data'\n  | 'example-data-response' // Main to Renderer\n  | 'main-process-message'  // Main to Renderer\n  | 'get-app-version'\n  | 'open-external-link'\n  | 'perform-background-task'\n  | 'background-task-status'; // Main to Renderer\n\n// Define a generic payload type or specific types per channel\nexport interface IPCMessagePayload {\n  [key: string]: any;\n}\n\ninterface IPCHandlerContext {\n  config: MergedElectronConfig;\n  // Add other context like mainWindow if needed by handlers\n}\n\n/**\n * Initializes IPC handlers in the main process.\n * Should be called after the app is ready and config is loaded.\n */\nexport function initializeIPCHandlers(context: IPCHandlerContext): void {\n  const { config } = context;\n\n  // Handle 'example-request-data' from renderer\n  ipcMain.on('example-request-data', (event: IpcMainEvent, args: IPCMessagePayload) => {\n    console.log('Main process received [example-request-data]:', args);\n    // Process data and send a response\n    event.sender.send('example-data-response', {\n      message: 'Data received successfully by main process',\n      originalData: args,\n      timestamp: new Date().toISOString(),\n    });\n  });\n\n  // Handle 'get-app-version' (invoke/handle pattern)\n  ipcMain.handle('get-app-version', async (_event: IpcMainInvokeEvent) => {\n    return config.productName ? `${config.productName} v${app.getVersion()}` : app.getVersion();\n  });\n\n  // Handle 'open-external-link'\n  ipcMain.on('open-external-link', (_event: IpcMainEvent, url: string) => {\n    if (url && (url.startsWith('http:') || url.startsWith('https:') || url.startsWith('mailto:'))) {\n      shell.openExternal(url);\n    } else {\n      console.warn(`Blocked attempt to open invalid external URL via IPC: ${url}`);\n    }\n  });\n  \n  // Example of a longer background task\n  ipcMain.handle('perform-background-task', async (event: IpcMainInvokeEvent, params: { duration: number }) => {\n    event.sender.send('background-task-status', { status: 'started', message: `Task started for ${params.duration}ms.` });\n    \n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const result = { success: true, data: `Task completed after ${params.duration}ms.` };\n        event.sender.send('background-task-status', { status: 'completed', result });\n        resolve(result);\n      }, params.duration || 2000);\n    });\n  });\n\n  console.log('IPC Handlers Initialized.');\n}\n\n/**\n * Sends a message from the main process to all renderer windows (or a specific one).\n * @param window - The BrowserWindow to send the message to. If null, sends to all windows (not implemented here).\n * @param channel - The IPC channel to use.\n * @param payload - The data to send.\n */\nexport function sendMessageToRenderer(\n  window: Electron.BrowserWindow | null,\n  channel: IPCChannel,\n  payload: IPCMessagePayload\n): void {\n  if (!window || window.isDestroyed()) {\n    console.warn(`Attempted to send IPC message to a destroyed window on channel: ${channel}`);\n    return;\n  }\n  // Ensure channel is whitelisted for receiving in preload.ts\n  // This check is implicitly handled by preload, but good to be aware.\n  window.webContents.send(channel, payload);\n}\n","/**\n * @fileOverview Manages application auto-updates using electron-updater.\n */\nimport { BrowserWindow } from 'electron';\nimport { autoUpdater, UpdateInfo, ProgressInfo } from 'electron-updater';\nimport log from 'electron-log'; // electron-updater uses electron-log internally\nimport type { ElectronConfig } from './config';\n\ntype UpdaterConfig = Required<NonNullable<ElectronConfig['updater']>>;\n\nexport function initializeUpdater(\n    mainWindow: BrowserWindow, \n    config: UpdaterConfig,\n    isDevOrDebug: boolean = false\n): void {\n    if (process.env.NODE_ENV === 'development' && !isDevOrDebug) {\n        log.info('Updater: Skipping auto-updater in development environment unless debug mode is enabled.');\n        return;\n    }\n\n    log.info('Updater: Initializing auto-updater.');\n    autoUpdater.logger = log; // Use the same logger instance\n    (autoUpdater.logger as any).transports.file.level = isDevOrDebug ? 'debug' : 'info';\n    \n    autoUpdater.autoDownload = config.autoDownload;\n    autoUpdater.autoInstallOnAppQuit = config.autoInstallOnAppQuit;\n    autoUpdater.allowDowngrade = config.allowDowngrade;\n    \n    // Example provider setup (if needed, often auto-detected)\n    // if (config.provider && config.url) {\n    //   autoUpdater.setFeedURL({\n    //     provider: config.provider as 'github' | 'generic' | 's3' | 'bintray' | 'custom' | 'spaces' | 'snapStore',\n    //     url: config.url,\n    //     // token, publishAutoUpdate for GitHub private repo, etc.\n    //   });\n    // }\n\n    autoUpdater.on('checking-for-update', () => {\n        log.info('Updater: Checking for update...');\n        mainWindow.webContents.send('updater-message', { event: 'checking-for-update' });\n    });\n\n    autoUpdater.on('update-available', (info: UpdateInfo) => {\n        log.info('Updater: Update available.', info);\n        mainWindow.webContents.send('updater-message', { event: 'update-available', info });\n        if (!config.autoDownload) {\n            // Optionally ask user to download\n            log.info('Updater: Auto-download disabled. User action required to download.');\n        }\n    });\n\n    autoUpdater.on('update-not-available', (info: UpdateInfo) => {\n        log.info('Updater: Update not available.', info);\n        mainWindow.webContents.send('updater-message', { event: 'update-not-available', info });\n    });\n\n    autoUpdater.on('error', (err) => {\n        log.error('Updater: Error in auto-updater.', err);\n        mainWindow.webContents.send('updater-message', { event: 'error', error: err.message });\n    });\n\n    autoUpdater.on('download-progress', (progressObj: ProgressInfo) => {\n        log.info(`Updater: Download progress: ${progressObj.percent}%`);\n        mainWindow.webContents.send('updater-message', { event: 'download-progress', progress: progressObj });\n    });\n\n    autoUpdater.on('update-downloaded', (info: UpdateInfo) => {\n        log.info('Updater: Update downloaded; will install on quit (if autoInstallOnAppQuit is true).', info);\n        mainWindow.webContents.send('updater-message', { event: 'update-downloaded', info });\n        // Optionally, prompt user to restart now\n        // const dialogOpts = {\n        //   type: 'info',\n        //   buttons: ['Restart', 'Later'],\n        //   title: 'Application Update',\n        //   message: process.platform === 'win32' ? info.releaseNotes : info.releaseName,\n        //   detail: 'A new version has been downloaded. Restart the application to apply the updates.'\n        // };\n        // dialog.showMessageBox(dialogOpts).then((returnValue) => {\n        //   if (returnValue.response === 0) autoUpdater.quitAndInstall();\n        // });\n        if (config.autoInstallOnAppQuit) {\n            log.info(\"Updater: Update will be installed when the application quits.\");\n        } else {\n            log.info(\"Updater: Update downloaded. Manual restart and install required or call autoUpdater.quitAndInstall().\");\n            // Consider prompting user to install now if autoInstallOnAppQuit is false.\n        }\n    });\n\n    // Check for updates\n    // For testing, you might need to set up a local update server or use a public release.\n    // If app is not packaged, electron-updater might not work as expected.\n    if (app.isPackaged || isDevOrDebug) {\n        log.info('Updater: Checking for updates now.');\n        autoUpdater.checkForUpdatesAndNotify().catch(err => {\n            log.error('Updater: checkForUpdatesAndNotify failed.', err);\n        });\n    } else {\n        log.info('Updater: App is not packaged and not in debug mode, skipping update check.');\n    }\n}\n\n// You might want to expose a way for the renderer to trigger checks or installs\n// e.g., via an IPC message handled in ipc.ts that calls autoUpdater methods.\n// ipcMain.on('updater-check-for-updates', () => autoUpdater.checkForUpdatesAndNotify());\n// ipcMain.on('updater-quit-and-install', () => autoUpdater.quitAndInstall());\n","/**\n * @fileOverview Logger utility for the Electron application.\n * Uses 'electron-log' for robust logging in main and renderer processes.\n */\nimport log, { LogLevel } from 'electron-log';\nimport path from 'path';\nimport { app } from 'electron';\n\n// Configure electron-log\n// You can customize the log format, level, and transports (file, console)\n\nexport function initializeLogger(logLevel: LogLevel = 'info'): void {\n  log.transports.file.resolvePathFn = () => path.join(app.getPath('userData'), 'logs', 'main.log');\n  log.transports.file.level = logLevel;\n  log.transports.console.level = logLevel;\n\n  // Example format: [YYYY-MM-DD HH:mm:ss.SSS] [level] (scope) message\n  log.transports.file.format = '[{y}-{m}-{d} {h}:{i}:{s}.{ms}] [{level}] {text}';\n  log.transports.console.format = '[{y}-{m}-{d} {h}:{i}:{s}.{ms}] [{level}] {text}';\n\n  // Set log level for all transports\n  log.variables.appName = app.getName(); // Optional: Add app name to log entries\n\n  // Catch unhandled errors and rejected promises\n  log.catchErrors({\n    showDialog: !app.isPackaged, // Show error dialog in development\n    onError: (error, versions, submitIssue) => {\n      log.error('Unhandled error or promise rejection:', error);\n      // If you have an issue reporting system:\n      // submitIssue?.('https://github.com/your-repo/issues/new', {\n      //   title: `Electron App Error: ${error.message}`,\n      //   body: `Error: ${error.stack}\\nOS: ${versions.os}\\nElectron: ${versions.electron}\\nApp: ${versions.app}`\n      // });\n    }\n  });\n\n  // Make electron-log the default console\n  // console.log = log.log;\n  // console.error = log.error;\n  // console.warn = log.warn;\n  // console.info = log.info;\n  // console.debug = log.debug;\n  // console.trace = log.verbose; // electron-log uses 'verbose' for trace-like level\n\n  log.info(`Logger initialized. Log level: ${logLevel}. Logs will be saved to: ${log.transports.file.getFile().path}`);\n}\n\n// Export the logger instance for use in other modules\nexport default log;\n","/**\n * @fileOverview WebGPU helper functions.\n * Manages enabling WebGPU features in Electron.\n */\n\nimport type { App } from 'electron';\nimport type { WebGPUConfig } from './config'; // Assuming WebGPUConfig is defined\n\n/**\n * Enables WebGPU related Chromium flags.\n * This function should be called before the 'ready' event of the app.\n *\n * @param app - The Electron App instance.\n * @param config - WebGPU configuration options.\n */\nexport function enableWebGPU(app: App, config: WebGPUConfig): void {\n  if (!app.isReady()) {\n    // Required for WebGPU\n    app.commandLine.appendSwitch('enable-features', 'Vulkan,UseSkiaRenderer'); // Skia is often default, Vulkan might be needed on Linux/Windows\n    app.commandLine.appendSwitch('enable-unsafe-webgpu'); // This flag is essential\n\n    if (config.forceSoftware) {\n      app.commandLine.appendSwitch('disable-gpu'); // Forces software rendering, implies no WebGPU hardware acceleration\n    }\n    \n    // Set ANGLE graphics backend (useful on Windows, can try 'd3d11', 'd3d9', 'opengl', 'metal')\n    // app.commandLine.appendSwitch('use-angle', 'default'); \n\n    // For WebGPU power preference\n    if (config.powerPreference && config.powerPreference !== 'default') {\n         // There isn't a direct command-line switch for powerPreference for WebGPU adapter options.\n         // This is typically handled at the WebGPU API level when requesting an adapter.\n         // However, some GPU driver settings or general Chromium flags might influence this.\n         // For example, on systems with multiple GPUs:\n         // app.commandLine.appendSwitch('gpu-startup-dialog'); // For debugging GPU selection\n         console.info(`WebGPU powerPreference '${config.powerPreference}' is set. This is primarily handled by the WebGPU adapter request in renderer code.`);\n    }\n    \n    console.log('WebGPU flags enabled. Note: Actual WebGPU availability depends on hardware, drivers, and OS.');\n\n  } else {\n    console.warn('enableWebGPU called after app is ready. WebGPU flags may not apply.');\n  }\n}\n\n/**\n * Checks if WebGPU is likely to be available.\n * This is a heuristic check, true availability is confirmed in the renderer.\n * @param app - The Electron App instance.\n * @returns True if WebGPU flags are set, false otherwise.\n */\nexport function isWebGPUEnabled(app: App): boolean {\n  return app.commandLine.hasSwitch('enable-unsafe-webgpu');\n}\n"],"mappings":"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","names":["app","BrowserWindow","app","app","shell","path","mainWindow","log","path","app","path","app","shell","mainWindow","app","app","BrowserWindow"]}