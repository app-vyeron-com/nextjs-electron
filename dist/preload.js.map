{"version":3,"sources":["../src/preload.ts"],"sourcesContent":["/**\n * @fileOverview Electron preload script.\n * This script runs in a privileged environment before the renderer process is loaded.\n * It uses `contextBridge` to securely expose specific APIs from the main process\n * to the renderer process.\n */\n\nimport { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron';\nimport type { IPCChannel, IPCMessagePayload } from './ipc'; // Assuming IPC types are defined\n\n// Whitelisted channels for IPC communication\nconst validSendChannels: IPCChannel[] = ['example-request-data', 'open-external-link'];\nconst validReceiveChannels: IPCChannel[] = ['example-data-response', 'main-process-message'];\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  // Send messages from renderer to main\n  send: (channel: IPCChannel, data: IPCMessagePayload) => {\n    if (validSendChannels.includes(channel)) {\n      ipcRenderer.send(channel, data);\n    } else {\n      console.warn(`Blocked attempt to send to invalid IPC channel: ${channel}`);\n    }\n  },\n  // Receive messages from main to renderer (one-way)\n  on: (channel: IPCChannel, func: (...args: any[]) => void) => {\n    if (validReceiveChannels.includes(channel)) {\n      // Deliberately strip event as it includes `sender`\n      const subscription = (_event: IpcRendererEvent, ...args: any[]) => func(...args);\n      ipcRenderer.on(channel, subscription);\n      // Return a cleanup function\n      return () => {\n        ipcRenderer.removeListener(channel, subscription);\n      };\n    } else {\n      console.warn(`Blocked attempt to listen on invalid IPC channel: ${channel}`);\n      return () => {}; // Return a no-op cleanup function\n    }\n  },\n  // Invoke messages (renderer to main and back with a response)\n  invoke: async (channel: IPCChannel, data: IPCMessagePayload): Promise<any> => {\n    if (validSendChannels.includes(channel)) { // Often invoke uses same send channels\n      return ipcRenderer.invoke(channel, data);\n    } else {\n      console.warn(`Blocked attempt to invoke invalid IPC channel: ${channel}`);\n      return Promise.reject(new Error(`Invalid IPC channel: ${channel}`));\n    }\n  },\n  // Example: Expose a specific utility\n  getAppVersion: () => ipcRenderer.invoke('get-app-version'),\n\n  // Example: Expose a function to open external links safely\n  openExternal: (url: string) => {\n    // Basic validation, more robust validation might be needed\n    if (url && (url.startsWith('http:') || url.startsWith('https:') || url.startsWith('mailto:'))) {\n      ipcRenderer.send('open-external-link', url);\n    } else {\n      console.warn(`Blocked attempt to open invalid external URL: ${url}`);\n    }\n  }\n});\n\n// Optional: Log that preload script has loaded\nconsole.log('Electron Preload Script Loaded.');\n\n// It's good practice to clean up listeners when the window is unloaded,\n// though ipcRenderer listeners are often managed per-component in React/Vue.\n// window.addEventListener('unload', () => {\n//   // ipcRenderer.removeAllListeners(); // Use with caution, might remove other listeners\n// });\n"],"mappings":";;;;AAOA,sBAA6D;AAI7D,IAAM,oBAAkC,CAAC,wBAAwB,oBAAoB;AACrF,IAAM,uBAAqC,CAAC,yBAAyB,sBAAsB;AAE3F,8BAAc,kBAAkB,eAAe;AAAA;AAAA,EAE7C,MAAM,CAAC,SAAqB,SAA4B;AACtD,QAAI,kBAAkB,SAAS,OAAO,GAAG;AACvC,kCAAY,KAAK,SAAS,IAAI;AAAA,IAChC,OAAO;AACL,cAAQ,KAAK,mDAAmD,OAAO,EAAE;AAAA,IAC3E;AAAA,EACF;AAAA;AAAA,EAEA,IAAI,CAAC,SAAqB,SAAmC;AAC3D,QAAI,qBAAqB,SAAS,OAAO,GAAG;AAE1C,YAAM,eAAe,CAAC,WAA6B,SAAgB,KAAK,GAAG,IAAI;AAC/E,kCAAY,GAAG,SAAS,YAAY;AAEpC,aAAO,MAAM;AACX,oCAAY,eAAe,SAAS,YAAY;AAAA,MAClD;AAAA,IACF,OAAO;AACL,cAAQ,KAAK,qDAAqD,OAAO,EAAE;AAC3E,aAAO,MAAM;AAAA,MAAC;AAAA,IAChB;AAAA,EACF;AAAA;AAAA,EAEA,QAAQ,OAAO,SAAqB,SAA0C;AAC5E,QAAI,kBAAkB,SAAS,OAAO,GAAG;AACvC,aAAO,4BAAY,OAAO,SAAS,IAAI;AAAA,IACzC,OAAO;AACL,cAAQ,KAAK,kDAAkD,OAAO,EAAE;AACxE,aAAO,QAAQ,OAAO,IAAI,MAAM,wBAAwB,OAAO,EAAE,CAAC;AAAA,IACpE;AAAA,EACF;AAAA;AAAA,EAEA,eAAe,MAAM,4BAAY,OAAO,iBAAiB;AAAA;AAAA,EAGzD,cAAc,CAAC,QAAgB;AAE7B,QAAI,QAAQ,IAAI,WAAW,OAAO,KAAK,IAAI,WAAW,QAAQ,KAAK,IAAI,WAAW,SAAS,IAAI;AAC7F,kCAAY,KAAK,sBAAsB,GAAG;AAAA,IAC5C,OAAO;AACL,cAAQ,KAAK,iDAAiD,GAAG,EAAE;AAAA,IACrE;AAAA,EACF;AACF,CAAC;AAGD,QAAQ,IAAI,iCAAiC;","names":[]}